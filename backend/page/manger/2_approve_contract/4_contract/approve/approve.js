// routes/contract1.js
const express = require("express");
const nodemailer = require("nodemailer");
const router = express.Router();
const Contract1 = require("../../../../../models/contract1"); // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
const Contract4 = require("../../../../../models/contract4"); // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
const User = require("../../../../../models/user"); // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á

//‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤
router.get("/get-user-contract4/:id", async (req, res) => {
    const id = req.params.id.trim(); // ‚úÖ ‡∏ï‡∏±‡∏î \n ‡∏≠‡∏≠‡∏Å

  try {
    const userData = await Contract4.findById(id);
    if (!userData) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
    res.json(userData);
  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
});




// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ transporter
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "sukrit.chosri@gmail.com",
    pass: "ndvb oowv vxgq rhqr",
  },
});

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
const sendApprovalEmail = async (contract4) => {
  try {
    // ‡∏î‡∏∂‡∏á contract_id ‡∏à‡∏≤‡∏Å Contract2
    const contract_id = contract4.contract_id;

    // ‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Contract1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ id_card_number
    const contract1 = await Contract1.findOne({ contract_id });

    if (!contract1 || !contract1.id_card_number) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Contract1 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ id_card_number");
      return;
    }

    // ‡πÄ‡∏≠‡∏≤ id_card_number ‡πÑ‡∏õ‡∏´‡∏≤ user
    const user = await User.findOne({ id_card_number: contract1.id_card_number });

    if (!user || !user.email) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
      return;
    }

    const mailOptions = {
      from: "sukrit.chosri@gmail.com",
      to: user.email,
      subject: "‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
      text: `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${contract1.first_name} ${contract1.last_name},

      ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${contract4.contract_id}
      ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà2 ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
      ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ`,
    };

    await transporter.sendMail(mailOptions);
    console.log("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:", error);
  }
};

  
// API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
router.put("/:id/approve-contract4", async (req, res) => {
    try {
      const { id } = req.params;
      const { approvedBy } = req.body; // ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  
      if (!approvedBy || !approvedBy.id_card_number || !approvedBy.position) {
        return res.status(400).json({ 
          success: false,
          error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        });
      }
  
      const updated = await Contract4.findByIdAndUpdate(
        id,
        {
          status: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
          approver_id_card: approvedBy.id_card_number,
          approver_position: approvedBy.position,
          action_timestamp: new Date(),
        },
        { new: true }
      );
  
      if (!updated) {
        return res.status(404).json({ 
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" 
        });
      }

      await sendApprovalEmail(updated); // üîî ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      res.json({
        success: true,
        message: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: updated,
      });
    } catch (error) {
      console.error("Error approving contract:", error);
      res.status(500).json({ 
        success: false,
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
        details: error.message 
      });
    }
});



//‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
const sendRejectionEmail = async (contract4, reason = "") => {
  try {
    // ‡∏î‡∏∂‡∏á contract_id ‡∏à‡∏≤‡∏Å Contract2
    const contract_id = contract4.contract_id;

    // ‡∏´‡∏≤ Contract1 ‡∏î‡πâ‡∏ß‡∏¢ contract_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥ id_card_number
    const contract1 = await Contract1.findOne({ contract_id });

    if (!contract1 || !contract1.id_card_number) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Contract1 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ id_card_number");
      return;
    }

    // ‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏≤‡∏Å Contract1
    const user = await User.findOne({ id_card_number: contract1.id_card_number });

    if (!user || !user.email) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
      return;
    }

    const mailOptions = {
      from: "sukrit.chosri@gmail.com",
      to: user.email,
      subject: "‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
      text: `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${contract1.first_name} ${contract1.last_name},

      ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${contract4.contract_id}
      ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà4 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"}
      ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`
    };

    await transporter.sendMail(mailOptions);
    console.log("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:", error);
  }
};

// API ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
router.put("/:id/reject-contract4", async (req, res) => {
    try {
      const { id } = req.params;
      const { rejectedBy, reason } = req.body; // ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  
      if (!rejectedBy || !rejectedBy.id_card_number || !rejectedBy.position) {
        return res.status(400).json({ 
          success: false,
          error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        });
      }
  
      const updateData = {
        status: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
        approver_id_card: rejectedBy.id_card_number,
        approver_position: rejectedBy.position,
        action_timestamp: new Date()
      };
  
      if (reason) {
        updateData.rejection_reason = reason;
      }
  
      const updated = await Contract4.findByIdAndUpdate(
        id,
        updateData,
        { new: true }
      );
  
      if (!updated) {
        return res.status(404).json({ 
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" 
        });
      }
  
      await sendRejectionEmail(updated, reason); // üîî ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      res.json({
        success: true,
        message: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: updated
      });
    } catch (error) {
      console.error("Error rejecting contract:", error);
      res.status(500).json({ 
        success: false,
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
        details: error.message 
      });
    }
});

module.exports = router;
